/*
 * DealersAndVehicles
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.18
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.DealersAndVehicles);
  }
}(this, (expect, DealersAndVehicles) => {
  'use strict';

  var instance;

  beforeEach(() => {
    instance = new DealersAndVehicles.VehiclesApi();
  });

  describe('(package)', () => {
    describe('VehiclesApi', () => {
      describe('getIds', () => {
        it('should call getIds successfully', (done) => {
          var datasetId = "22EgCqTL2Ag";

          instance.getIds(datasetId, (error, data, response) => {

            if (error) {
              done(error);
              return;
            }
            expect(data).to.be.a(DealersAndVehicles.VehicleIdsResponse);
            {
              let dataCtr = data.vehicleIds;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();

              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('number');
                expect(data).to.be(0);
              }
            }
            expect(response).to.have.status(200)
            done();
          });
          done();
        });
      });
      describe('getVehicle', () => {
        it('should call getVehicle successfully', (done) => {
          var datasetId = "22EgCqTL2Ag";
          var vehicleid = 1493533791;

          instance.getVehicle(datasetId, vehicleid, (error, data, response) => {

            if (error) {
              done(error);
              return;
            }
            expect(data).to.be.a(DealersAndVehicles.VehicleResponse);
            expect(data.vehicleId).to.be.a('number');
            expect(data.vehicleId).to.be(0);
            expect(data.year).to.be.a('number');
            expect(data.year).to.be(0);
            expect(data.make).to.be.a('string');
            expect(data.make).to.be("");
            expect(data.model).to.be.a('string');
            expect(data.model).to.be("");
            expect(data.dealerId).to.be.a('number');
            expect(data.dealerId).to.be(0);
            expect(response).to.have.status(200)
            done();
          });
          done();
        });
      });
    });
  });

}));
